services:
  app:
    image: app
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    ports:
      - '3000:3000'
    env_file:
      - .env
    volumes:
      - ./src:/app/src
    depends_on:
      mongo1:
        condition: service_healthy
    networks:
      - ora-adm-network

  mongo1:
    image: mongo:8.0
    command: ['--replSet', 'rs0', '--bind_ip_all', '--port', '27017']
    ports:
      - 27017:27017
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017',priority:1},{_id:1,host:'host.docker.internal:27018',priority:0.5},{_id:2,host:'host.docker.internal:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - 'mongo1_data:/data/db'
      - 'mongo1_config:/data/configdb'
    networks:
      - ora-adm-network

  mongo2:
    image: mongo:8.0
    command: ['--replSet', 'rs0', '--bind_ip_all', '--port', '27018']
    ports:
      - 27018:27018
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - 'mongo2_data:/data/db'
      - 'mongo2_config:/data/configdb'
    networks:
      - ora-adm-network

  mongo3:
    image: mongo:8.0
    command: ['--replSet', 'rs0', '--bind_ip_all', '--port', '27019']
    ports:
      - 27019:27019
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    volumes:
      - 'mongo3_data:/data/db'
      - 'mongo3_config:/data/configdb'
    networks:
      - ora-adm-network

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config:

networks:
  ora-adm-network:
