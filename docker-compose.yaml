services:
  app:
    image: app
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    ports:
      - '3000:3000'
    env_file:
      - .env
    volumes:
      - ./src:/app/src
    depends_on:
      db:
        condition: service_healthy
    networks:
      - ora-adm-network
  db:
    image: mongo:8.0.0-rc17-noble
    container_name: database
    ports:
      - 27019:27017
    entrypoint:
      - bash
      - -c
      - |
        openssl rand -base64 756 > /data/replica.key
        chmod 400 /data/replica.key
        chown 999:999 /data/replica.key
        exec docker-entrypoint.sh $$@
    command: mongod --bind_ip_all --replSet rs0 --keyFile /data/replica.key
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - ora-adm_data:/data/db
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    networks:
      - ora-adm-network
  db-init:
    image: mongo:8.0.0-rc17-noble
    restart: 'no'
    depends_on:
      db:
        condition: service_healthy
    env_file: .env
    volumes:
      - ora-adm_data:/data/db
    command: >
      mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} --host db:27017 --eval
      '
      rs.initiate( {
         _id : "rs0",
         members: [
            { _id: 0, host: "db:27017" }
         ]
      })
      '
    networks:
      - ora-adm-network

networks:
  ora-adm-network:
    driver: bridge

volumes:
  ora-adm_data:
    driver: local
